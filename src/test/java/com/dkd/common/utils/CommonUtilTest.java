package com.dkd.common.utils;import com.dkd.XiaoyudiApplication;import com.dkd.common.config.Global;import com.dkd.common.constant.ResultStant;import com.dkd.model.XydPhoneQcellcore;import com.dkd.service.XydPhoneQcellcoreService;import org.apache.http.entity.ContentType;import com.dkd.XiaoyudiApplication;import com.dkd.common.config.Global;import com.dkd.model.XydParents;import com.dkd.service.XydChildService;import com.dkd.service.XydParentsService;import com.dkd.service.XydPhoneQcellcoreService;import com.dkd.service.XydSystemRemindService;import com.dkd.service.impl.XydChildServiceImpl;import com.dkd.service.impl.XydParentsServiceImpl;import com.dkd.service.impl.XydPhoneQcellcoreServiceImpl;import com.dkd.service.impl.XydSystemRemindServiceImpl;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.data.redis.core.RedisTemplate;import org.springframework.mock.web.MockHttpServletRequest;import org.springframework.mock.web.MockMultipartFile;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.transaction.annotation.Transactional;import org.springframework.web.multipart.MultipartFile;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import javax.servlet.http.HttpServletRequest;import java.io.File;import java.io.FileOutputStream;import java.util.*;import static com.dkd.manage.VerbControllerTest.image2byte;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class,properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class CommonUtilTest {    private Logger logger =  LoggerFactory.getLogger(CommonUtilTest.class);    @Autowired    private RedisService redisService;    @Autowired    Global global;    @Autowired    private XydPhoneQcellcoreService xydPhoneQcellcoreService;    @Autowired    private XydParentsService xydParentsService;    @Autowired    private XydSystemRemindService xydSystemRemindService;    @Autowired    private XydChildService xydChildService;    @Autowired    private RedisTemplate redisTemplate;    @Test    public void AliyunSendUtilTest(){        String phone="15956993592";        String sedType="86";        AliyunSendUtil.sendCode("", redisTemplate, "86", "Hello Test");        AliyunSendUtil.sendCode("", redisTemplate, "86", global.getLoginMSM());       // redisService.set(sedType+phone,"亲爱的${name},您的验证码为${code}",24*60*60L);        redisService.remove(sedType+phone);        AliyunSendUtil.sendCode(phone, redisTemplate, sedType, global.getLoginMSM());        AliyunSendUtil.sendCode(phone, redisTemplate, sedType, global.getRegisterMSM());        XydPhoneQcellcore xydPhoneQcellcore = xydPhoneQcellcoreService.selectByPrimaryKey(2);        AliyunSendUtil.sendCountryCode("", redisTemplate,xydPhoneQcellcore, "Hello Test");        AliyunSendUtil.sendCountryCode("", redisTemplate,xydPhoneQcellcore,  global.getLoginMSM());        // redisService.set(sedType+phone,"亲爱的${name},您的验证码为${code}",24*60*60L);        redisService.remove(sedType+phone);        AliyunSendUtil.sendCountryCode(phone, redisTemplate,xydPhoneQcellcore, global.getLoginMSM());        AliyunSendUtil.sendCountryCode(phone, redisTemplate,xydPhoneQcellcore, global.getRegisterMSM());        AliyunSendUtil.sendText("","","");        AliyunSendUtil.sendText(phone,"","");        AliyunSendUtil.sendText(phone,"86","");        AliyunSendUtil.sendText(phone,"86",global.getLoginMSM());        AliyunSendUtil.sendText(phone,"86","Hello Test");        AliyunSendUtil.sendText(phone,"87","");        AliyunSendUtil.sendText(phone,"87",global.getLoginMSM());        AliyunSendUtil.sendText(phone,"87","Hello Test");        AliyunSendUtil.sendCountryText("",null,"");        AliyunSendUtil.sendCountryText(phone,xydPhoneQcellcore,"");        AliyunSendUtil.sendCountryText(phone,xydPhoneQcellcore,"");        AliyunSendUtil.sendCountryText(phone,xydPhoneQcellcore,global.getLoginMSM());        AliyunSendUtil.sendCountryText(phone,xydPhoneQcellcore,"");        AliyunSendUtil.sendCountryText(phone,xydPhoneQcellcore,"Hello Test");        AliyunSendUtil.sendRemind("","","","");        AliyunSendUtil.sendRemind(phone,"","test","");        AliyunSendUtil.sendRemind(phone,"86","test","");        AliyunSendUtil.sendRemind(phone,"86","test",global.getLoginMSM());        AliyunSendUtil.sendRemind(phone,"86","test","hello");        AliyunSendUtil.sendRemind(phone,"87","test","");        AliyunSendUtil.sendRemind(phone,"87","test",global.getLoginMSM());        AliyunSendUtil.sendRemind(phone,"87","test","hello");        AliyunSendUtil.sendCountryRemind("",xydPhoneQcellcore,"test","");        AliyunSendUtil.sendCountryRemind(phone,xydPhoneQcellcore,"test","");        AliyunSendUtil.sendCountryRemind(phone,xydPhoneQcellcore,"test","");        AliyunSendUtil.sendCountryRemind(phone,xydPhoneQcellcore,"test",global.getLoginMSM());        AliyunSendUtil.sendCountryRemind(phone,xydPhoneQcellcore,"test","");        AliyunSendUtil.sendCountryRemind(phone,xydPhoneQcellcore,"test","hello");    }    @Test    public void FileUtilsTest(){         String testImg = System.getProperty("user.dir") + "/src/main/resources/test.jpg";        MockMultipartFile mockMultipartFile = new MockMultipartFile("verbImage","verbImage.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));        FileUtils.uploadfile(mockMultipartFile);    }    @Test    public void HttpUtilTest(){        HttpUtil httpUtil = new HttpUtil();        httpUtil.httpByPost("https://travis-ci.com","12");        httpUtil.sendGet("https://travis-ci.com","12");    }    @Test    public void IPUtilTest(){        IPUtil ipUtil = new IPUtil();        MockHttpServletRequest request = new MockHttpServletRequest();        IPUtil.getIpAddr(request);    }    @Test    public void ChineseCharToEnUtilTest(){        ChineseCharToEnUtil chineseCharToEnUtil = new ChineseCharToEnUtil();        ChineseCharToEnUtil.getAllFirstLetter("北京()9Oo*IO欢迎您");        ChineseCharToEnUtil.getAllFirstLetter(null);        ChineseCharToEnUtil.getAllFirstLetter("");        ChineseCharToEnUtil.getFirstLetter("");        ChineseCharToEnUtil.getFirstLetter(null);        ChineseCharToEnUtil.getFirstLetter("123");    }    @Test    public void StringUtilTest(){        StringUtil stringUtil = new StringUtil();        logger.info(StringUtil.CHINESE_BLANK);        logger.info(StringUtil.Simplified);        logger.info(StringUtil.Traditional);        StringUtil.double2Byte(Double.valueOf(2.8).doubleValue());        StringUtil.byte2double((byte)2);        StringUtil.byte2double((byte)0);        StringUtil.str2Int("1",2);        StringUtil.str2Int(null);        StringUtil.str2Int("1");        StringUtil.str2Int("s");        StringUtil.str2Int0("1");        StringUtil.toHexString("123456");        StringUtil.char2HexNumber("123456".charAt(0));        StringUtil.str2Double("123456.00");        StringUtil.get4she5ru(Double.valueOf("123456.00"),1);        StringUtil.str2Double("s");        StringUtil.str2Double(null);        StringUtil.htmlEscape("123456.00");        StringUtil.javaScriptEscape("00");        StringUtil.escapeHtml("<");        StringUtil.escapeHtml("s");        StringUtil.escapeHtml("");        StringUtil.escapeHtml(null);        StringUtil.escapeHtml(">");        StringUtil.escapeHtml("&");        StringUtil.replaceNBSP(null);        StringUtil.replaceNBSP("");        StringUtil.escapeHtml("\"");        StringUtil.removeHtml("123124\"");        StringUtil.removeHtml(null);        StringUtil.removeResouce("123124>\"");        StringUtil.removeResouce(null);        StringUtil.removeNRT("123124>\n\"");        StringUtil.test();        StringUtil.sqlQuote("123");        StringUtil.sqlQuote(null);        StringUtil.sqlQuote("\\");        StringUtil.sqlQuote("''");        StringUtil.sqlQuote("'");        StringUtil.sqlQuote("\"");        StringUtil.sqlQuote("\\");        StringUtil.strNotNull("123");        StringUtil.strNotNull("");        StringUtil.strIsNull("");        StringUtil.showSelect(null,null);        StringUtil.showSelect("select","select");        StringUtil.showSelect("select","select1");        StringUtil.strIsNull("1");        StringUtil.str2Long(null);        StringUtil.getParameter(null,null,null);        StringUtil.str2Long("2");        StringUtil.str2Long(" ");        StringUtil.str2Long("　");        StringUtil.int2Byte(1);        StringUtil.str2Byte0("1");        StringUtil.str2Byte0("s");        StringUtil.tranChs(new StringBuffer("123124我u"),true);        StringUtil.tranChs(new StringBuffer("123124我u"),false);        StringUtil.getClassName(this.getClass());        MockHttpServletRequest request = new MockHttpServletRequest();        StringUtil.strNotNull(request,null);        StringUtil.strNotNull(request,"1");        StringUtil.getParameter(request,"1213",null);    }    @Test    public void  VerifyCodeUtilsTest() {        try {            String path = System.getProperty("user.dir") + "/src/main/resources/test.jpg";            String path1= System.getProperty("user.dir") + "/src/main/resources/"+(int)((Math.random()*9+1)*10000000)+".jpg";            VerifyCodeUtils verifyCodeUtils = new VerifyCodeUtils();            VerifyCodeUtils.generateVerifyCode(10);            VerifyCodeUtils.generateVerifyCode(10, null);            VerifyCodeUtils.generateVerifyCode(10, "");            VerifyCodeUtils.outputVerifyImage(10, 10, new File(path), 0);            VerifyCodeUtils.outputVerifyImage(10, 10, new FileOutputStream(new File(path)),0);            VerifyCodeUtils.outputImage(10, 10, new FileOutputStream(new File(path)), "");            VerifyCodeUtils.outputImage(10, 10, new FileOutputStream(new File(path1)), "");            VerifyCodeUtils.outputImage(10, 10, new File(path), "");            VerifyCodeUtils.outputImage(10, 10, new File(path1), "");        }catch (Exception e){        }    }    @Test    public void  TemplateUtilsTest() {        try {            TemplateUtils templateUtils = new TemplateUtils();            templateUtils.setGlobal(global);            templateUtils.setXydParentsService(xydParentsService);            templateUtils.setXydSystemRemindService(xydSystemRemindService);            templateUtils.setXydPhoneQcellcoreService(xydPhoneQcellcoreService);            templateUtils.setXydChildService(xydChildService);            templateUtils.getGlobal();            templateUtils.getXydParentsService();            templateUtils.getXydSystemRemindService();            templateUtils.getXydPhoneQcellcoreService();            templateUtils.getXydChildService();            templateUtils.sendTemplate(1L, "1", "86", "18844272334", 228);        }catch (Exception e){            e.printStackTrace();        }    }    @Test    public void  MyMD5UtilTest() {        try {            MyMD5Util verifyCodeUtils = new MyMD5Util();            verifyCodeUtils.hexStringToByte("abc");            verifyCodeUtils.byteToHexString("abc".getBytes());            verifyCodeUtils.validPassword("123456", "2C313CFED99D30031B9AF50AB6BA73DD153EB2B0823BBC5ABF2773A0");            verifyCodeUtils.getEncryptedPwd("123456");        }catch (Exception e){            e.printStackTrace();        }    }    @Test    public void  PhoneCheckUtilTest() {        try{            PhoneCheckUtil phoneCheckUtil = new PhoneCheckUtil();            phoneCheckUtil.phoneCheck("18230113333");            phoneCheckUtil.foreigPhoneCheck("18230113333");            phoneCheckUtil.phoneTypeCheck("18230113333", "86");            phoneCheckUtil.main(new String[]{});            JpushTemplateUtil jpushTemplateUtil = new JpushTemplateUtil();            jpushTemplateUtil.getGlobal();            jpushTemplateUtil.getXydChildService();            jpushTemplateUtil.getXydParentsService();            jpushTemplateUtil.getXydPhoneQcellcoreService();            jpushTemplateUtil.getXydSystemRemindService();            jpushTemplateUtil.setGlobal(null);            jpushTemplateUtil.setXydChildService(null);            jpushTemplateUtil.setXydParentsService(null);            jpushTemplateUtil.setXydPhoneQcellcoreService(null);            jpushTemplateUtil.setXydSystemRemindService(null);        }catch (Exception e){            e.printStackTrace();        }    }    @Test    public void  PrintToFileTest() {        try {            PrintToFile printToFile = new PrintToFile();            printToFile.print("code");            printToFile.printPlay("code");            printToFile.main(new String[]{});        } catch (Exception e) {        }    }    @Test    public void  RedisServiceTest() {        try{            redisService.set("cpf","cpf");            redisService.get("cpf");            redisService.set("cpfremovePattern", "cpfremovePattern");            redisService.set("cpf60","cpf",60L);            redisService.set("cpf3600","cpf",60 * 60L);            redisService.remove("cpf", "cpf60");            redisService.remove("cpf3600");            redisService.removePattern("cpfremovePattern");            redisService.exists("cpfremovePattern");            redisService.hmSet("cpfhmset", "bb", "aa");            redisService.hmGet("cpfhmset", "bb");            redisService.lPush("cpflPush", "bb");            redisService.lRange("cpflPush", 1L, 1L);            redisService.add("bb", "bb");            redisService.setMembers("bb");            redisService.zAdd("cc", "cc", 1);            redisService.rangeByScore("cc", 1, 1);            redisService.remove("cpfhmset", "cpflPush","bb","cc");        }catch (Exception e){            e.printStackTrace();        }    }    @Test    public void  DateUtilTest() {        try {            DateUtil dateUtil = new DateUtil();            DateUtil.getDate();            DateUtil.formatDate(new Date());            DateUtil.getDate4Day(new Date());            DateUtil.format2English(new Date());            DateUtil.getDateyyyyMMdd();            DateUtil.getDateyyyyMMdd(new Date());            DateUtil.getDateyyyyMM(new Date());            DateUtil.getDateyyyy_MM_dd(new Date());            DateUtil.getLastMonthYYYYMM(new Date());            DateUtil.getYYYYMM(new Date());            DateUtil.getYYYYMMDD(new Date());            DateUtil.get30DayZeroClock(new Date());            DateUtil.getNextZeroDate(new Date());            DateUtil.getMonthLastDay(new Date());            DateUtil.getFirstDayByPreMonth(new Date());            DateUtil.getCalendar(new Date());            DateUtil.getChargeMonth(new Date());            DateUtil.getFirstDayByNextMonth(2019,1);            DateUtil.getDealDayByMonth(2019,1);            DateUtil.getFirstDayByPreMonth(2019,1);            DateUtil.getLastDayByMonth(2019,1);            DateUtil.getFirstDayByMonth(2019,1);            DateUtil.getDate("","");            DateUtil.getFirstDayByMonth("2019-01");            DateUtil.getNextDayByDate(new Date());            DateUtil.getZeroDate(new Date());            DateUtil.getLastTimeByMonth(new Date());            DateUtil.getDayEndByDate(new Date());            DateUtil.getNextMonthDayByDate(new Date());            DateUtil.getBeforeMothDateByDate(new Date());            DateUtil.getPreDayByDate(new Date());            DateUtil.begin(new Date());            DateUtil.end(new Date());            DateUtil.getPreDayByDate(new Date(),1);            DateUtil.getInt(new Date(),1);            DateUtil.getBeforeDay(new Date(),1);            DateUtil.isTheSameMonth(new Date(),1,2);            DateUtil.getAfterDay(null,1);            DateUtil.getPreDay000ByDate(new Date());            DateUtil.get7DayZeroClock(new Date());            DateUtil.getWeekFirstDay(new Date());            DateUtil.getWeekLastDay(new Date());            DateUtil.getFirstDayByDate(new Date());            DateUtil.getIntervalMonths(new Date());            DateUtil.getThreeMothDateByDate(new Date());            DateUtil.getIntevelDays(new Date(),new Date());            DateUtil.isTheSameMonth(new Date(),new Date());            DateUtil.dateEqualYM(new Date(),new Date());            DateUtil.isLastMonth(new Date(),new Date());            DateUtil.isTheSameDay(new Date(),new Date());            DateUtil.isTheSameDay(null,null);            DateUtil.getAfterMonth(new Date(),1);            DateUtil.getIntervalMonths(new Date(),new Date());            DateUtil.getMonthsCount(new Date(),new Date());            DateUtil.getDateY_M_D();            DateUtil.getNow();            DateUtil.getNext12Hours();            DateUtil.getDateHMS();            DateUtil.getCurrentTime();            DateUtil.getDateyyyyMM(new Date());            DateUtil.getPriorDayByDate(null);            DateUtil.parse(null,null);            DateUtil.parse(null);            DateUtil.parse("2018-123-12","yyyy-MM-dd");            DateUtil.format("yyyy-MM-dd", Locale.ENGLISH,new Date());            DateUtil.getMonthFirst("2019-04-29","yyyy-MM-dd");            DateUtil.getMonthFirst("2019-0429","yyyy-MM-dd");            DateUtil.getMonthEnd("2019-04-29","yyyy-MM-dd");            DateUtil.getMonthEnd("2019-0429","yyyy-MM-dd");            DateUtil.getMonthFirstDay("2019-04-29","yyyy-MM-dd");            DateUtil.getMonthFirstDay("2019-0429","yyyy-MM-dd");            DateUtil.getMonthEndDay("2019-04-29","yyyy-MM-dd");            DateUtil.getMonthEndDay("2019-0429","yyyy-MM-dd");            DateUtil.getFirstDayByMonth("2019-04-29","yyyy-MM-dd");            DateUtil.parse(null,null);            DateUtil.parse(null,null);            DateUtil.dateEqualYM(null,null);            DateUtil.isLastMonth(null,null);            DateUtil.getAfterMonth(null,1);            DateUtil.getStrDate(new Date(),"yyyy-MM-dd");            DateUtil.parse(null);            DateUtil.getCalendar(null);            DateUtil.getDayEndByDate(null);            DateUtil.getNextDayByDate(null);            DateUtil.begin(null);            DateUtil.end(null);            DateUtil.getCurrentMonthDay(new Date());            DateUtil.getThreeMonthMornTimeLong(new Date());            DateUtil.findDates(new Date(),new Date());            DateUtil.getThreeMonthTimeLong(new Date());            DateUtil.getMonth(new Date());            DateUtil.getPriorDayByDate(new Date());            DateUtil.getLastWeekDate(new Date());            DateUtil.getMonthAge(new Date(),new Date());            DateUtil.getFirstDayByNextMonth(new Date());            DateUtil.getAfterDay(new Date(),1);            DateUtil.getLastMonthByDate(new Date());            DateUtil.parse("2019-12-12 12:12:12");            DateUtil.getDate("2019-12-12 12:12:12");            DateUtil.parseDate("2019-12-12");            DateUtil.getDateyyyy_MM_dd();        }catch (Exception e){        }    }    @Test    public void  TokenProccessorTest() {        TokenProccessor tokenProccessor = TokenProccessor.getInstance();        tokenProccessor.setRedisTemplate(redisTemplate);        tokenProccessor.getInstance().getRedisTemplate();        try{            tokenProccessor.makeToken();        }catch (Exception e){            e.printStackTrace();        }        try{            tokenProccessor.getValueByKeyTheRedis("1");            tokenProccessor.getUserTypeTheEnglishByCode(null);            tokenProccessor.getUserTypeTheCodeByEnglish(null);            tokenProccessor.getUserTypeTheCodeByEnglish("");            tokenProccessor.getUserTypeTheEnglishByObject("");            tokenProccessor.getUserTypeTheNumberByObject("");        }catch (Exception e){            e.printStackTrace();        }        try{            XydParents xydParents=new XydParents();            xydParents.setId(628);            xydParents.setToken("9Zef/Sibas4e6f0GMLPohQ==");            tokenProccessor.saveUserInfoByTokenToRedis(xydParents);        }catch (Exception e){            e.printStackTrace();        }        try{            tokenProccessor.saveKeyValueToRedis("cd", "cd");        }catch (Exception e){            e.printStackTrace();        }        try{            tokenProccessor.getUserTypeTheEnglishByCode(0);        }catch (Exception e){            e.printStackTrace();        }        try{            tokenProccessor.getUserTypeTheCodeByEnglish("XydParents");            tokenProccessor.getUserTypeTheEnglishByObject(new XydParents());            tokenProccessor.getUserTypeTheNumberByObject(new XydParents());        }catch (Exception e){            e.printStackTrace();        }    }    @Test    public void JpushClientUtil(){        JpushClientUtil.pushMsg("tag1","","");        JpushClientUtil.pushNotice("tag","","");        JpushClientUtil.pushMsg("tag","","");        JpushClientUtil.pushNotice("tag1","","");        JpushClientUtil.pushMsg("alias","","");        JpushClientUtil.pushNotice("alias","","");        JpushClientUtil.main(new String[]{});    }    @Test    public void IsObjectNullUtils(){        IsObjectNullUtils isObjectNullUtils = new IsObjectNullUtils();        IsObjectNullUtils.checkMapParam(new HashMap(),null,true);        IsObjectNullUtils.checkMapParam(new HashMap(),new Object(),true);        IsObjectNullUtils.checkMapParam(new HashMap(),new Object(),false);        IsObjectNullUtils.isZero(new HashMap<>());        IsObjectNullUtils.isZero(new ArrayList<>());        IsObjectNullUtils.isZero(null);        IsObjectNullUtils.isZero(0);        IsObjectNullUtils.is(new HashMap<>());        IsObjectNullUtils.is(new Object[]{});        IsObjectNullUtils.is(new Object[]{1});        IsObjectNullUtils.is(null);        IsObjectNullUtils.is("");        IsObjectNullUtils.is(("12131".subSequence(0,1)));        Map<String,Object> map = new HashMap();        map.put("1","1");        map.put("2","");        map.put("3","0");        IsObjectNullUtils.checkMapParam(map,"1",true);        IsObjectNullUtils.checkMapParam(map,"1",false);        IsObjectNullUtils.checkMapParam(map,"",true);        IsObjectNullUtils.checkMapParam(map,"0",true);    }    @Test    public void testChar(){    }}
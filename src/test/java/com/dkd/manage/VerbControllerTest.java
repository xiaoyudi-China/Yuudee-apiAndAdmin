package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.apache.http.entity.ContentType;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.mock.web.MockMultipartFile;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import java.io.*;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.Arrays;import java.util.List;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class VerbControllerTest {    private final Logger logger = LoggerFactory.getLogger(VerbControllerTest.class);    private MockMvc mockMvc;    @Autowired    private VerbController verbController;    private String reqUrl = "/manage/verb";    private String testImg = System.getProperty("user.dir") + "/src/main/resources/test.jpg";    MockMultipartFile mockMultipartFile = new MockMultipartFile("verbImage","verbImage.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile1 = new MockMultipartFile("verbRecord","verbRecord.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile2 = new MockMultipartFile("cardImage","cardImage.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile3 = new MockMultipartFile("cardRecord","cardRecord.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile4 = new MockMultipartFile("startSlideshow","startSlideshow.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile5 = new MockMultipartFile("endSlideshow","endSlideshow.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile6 = new MockMultipartFile("groupImage","groupImage.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile7 = new MockMultipartFile("groupRecord","groupRecord.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(verbController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toVerbTrainingPage() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/toVerbTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toVerbTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toVerbTrainingPage result:" + result);    }    @Test    public void toVerbTestPage() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.get(reqUrl + "/toVerbTestPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toVerbTestPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toVerbTestPage result:" + result);    }    @Test    public void toAddVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/toAddVerbTraining").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddVerbTraining result:" + result);    }    @Test    public void toAddVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/toAddVerbTest").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddVerbTest result:" + result);    }    @Test    public void getVerbTestList() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getVerbTestList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getVerbTestList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getVerbTestList result:" + result);    }    @Test    public void getVerbTestList1() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("groupWord",Arrays.asList("groupWord"));        jsonObject.put("disturbType",Arrays.asList("disturbType"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getVerbTestList")                        .params(jsonObject)                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getVerbTestList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getVerbTestList result:" + result);    }    @Test    public void addVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/addVerbTest")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addVerbTest result:" + result);    }    @Test    public void addVerbTest1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/addVerbTest")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .param("verbChar","吃")                .param("verbType","1")                .param("cardChar","虫")                .param("groupChar","吃虫")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addVerbTest result:" + result);    }    @Test    public void addVerbTest2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/addVerbTest")                .param("cardOneTime","1")                .param("cardTwoTime","1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addVerbTest result:" + result);    }    @Test    public void deleteVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/deleteVerbTest")                .param("id", "4"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteVerbTest result:" + result);    }    @Test    public void deleteVerbTest2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/deleteVerbTest")                .param("id", "0"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteVerbTest result:" + result);    }    @Test    public void deleteVerbTest1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/deleteVerbTest")                .param("id", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteVerbTest result:" + result);    }    @Test    public void updateVerbTest() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateVerbTest")                .param("id", "4")                .param("cardOneTime", "11")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTest result:" + result);    }    @Test    public void updateVerbTest0() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateVerbTest")                .param("id", "4")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTest result:" + result);    }    @Test    public void updateVerbTest2() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/updateVerbTest")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .param("verbChar","吃")                .param("verbType","1")                .param("cardChar","虫")                .param("groupChar","吃虫")                .param("id", "4")                .param("cardOneTime", "11")                .param("cardTwoTime", "11")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTest result:" + result);    }    @Test    public void updateVerbTest1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateVerbTest")                .param("id", "")                .param("cardOneTime", "11")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTest result:" + result);    }    @Test    public void verbTestDetail() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/verbTestDetail").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====verbTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====verbTestDetail result:" + result);    }    @Test    public void verbTestDetail1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/verbTestDetail").param("id", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====verbTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====verbTestDetail result:" + result);    }    @Test    public void getVerbTrainingList() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getVerbTrainingList")                .params(jsonObject)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getVerbTrainingList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getVerbTrainingList result:" + result);    }    @Test    public void getVerbTrainingList1() throws Exception {        MultiValueMap<String,String> jsonObject = new LinkedMultiValueMap<>();        jsonObject.put("start", Arrays.asList("1"));        jsonObject.put("length",Arrays.asList("10"));        jsonObject.put("groupWord",Arrays.asList("groupWord"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getVerbTrainingList")                .params(jsonObject));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getVerbTrainingList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getVerbTrainingList result:" + result);    }    @Test    public void getHelpTime() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getHelpTime")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getHelpTime mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getHelpTime result:" + result);    }    @Test    public void getHelpTime1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/getHelpTime")                .param("topic","20")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getHelpTime mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getHelpTime result:" + result);    }    @Test    public void addVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/addVerbTraining")                .param("verbType", "1")                .param("verbChar", "1")                );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addVerbTraining result:" + result);    }    @Test    public void addVerbTraining1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/addVerbTraining")                        .file(mockMultipartFile)                        .file(mockMultipartFile1)                        .file(mockMultipartFile2)                        .file(mockMultipartFile3)                        .file(mockMultipartFile4)                        .file(mockMultipartFile5)                        .file(mockMultipartFile6)                        .file(mockMultipartFile7)                        .param("verbChar","吃")                        .param("verbType","1")                        .param("cardChar","虫")                        .param("groupChar","吃虫")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addVerbTraining result:" + result);    }    @Test    public void deleteVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/deleteVerbTraining").param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteVerbTraining result:" + result);    }    @Test    public void deleteVerbTraining1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/deleteVerbTraining").param("id", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteVerbTraining result:" + result);    }    @Test    public void updateVerbTraining() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateVerbTraining")                .param("id", "2")                .param("verbChar","吃")                .param("verbType","1")                .param("cardChar","虫")                .param("groupChar","吃虫")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTraining result:" + result);    }    @Test    public void test() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/updateVerbTraining")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .param("id", "2")                .param("verbChar","吃")                .param("verbType","1")                .param("cardChar","虫")                .param("groupChar","吃虫")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTraining result:" + result);    }    public static byte[] image2byte(String imgURL) {        ByteArrayOutputStream outPut = new ByteArrayOutputStream();        byte[] data = new byte[1024];        try {            FileInputStream fileInputStream = new FileInputStream(new File(imgURL));            int len = -1;            while ((len = fileInputStream.read(data)) != -1) {                outPut.write(data, 0, len);            }            fileInputStream.close();        } catch (IOException e) {            e.printStackTrace();        }        return outPut.toByteArray();    }        @Test    public void updateVerbTraining1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/updateVerbTraining")                .param("id", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateVerbTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateVerbTraining result:" + result);    }    @Test    public void verbTrainingDetail() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/verbTrainingDetail")                .param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====verbTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====verbTrainingDetail result:" + result);    }    @Test    public void verbTrainingDetail1() throws Exception {        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.post(reqUrl + "/verbTrainingDetail").param("id", ""));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====verbTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====verbTrainingDetail result:" + result);        verbController.jiaoyan(new ArrayList<>());        List<String> list = new ArrayList<>();        list.add("1");        verbController.jiaoyan(list);    }}
package com.dkd.manage;import com.dkd.XiaoyudiApplication;import org.apache.http.entity.ContentType;import org.junit.After;import org.junit.Before;import org.junit.Test;import org.junit.runner.RunWith;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.http.HttpMethod;import org.springframework.mock.web.MockMultipartFile;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;import org.springframework.test.web.servlet.MockMvc;import org.springframework.test.web.servlet.MvcResult;import org.springframework.test.web.servlet.ResultActions;import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;import org.springframework.test.web.servlet.setup.MockMvcBuilders;import org.springframework.transaction.annotation.Transactional;import org.springframework.util.LinkedMultiValueMap;import org.springframework.util.MultiValueMap;import java.util.ArrayList;import java.util.Arrays;import java.util.List;import static com.dkd.manage.VerbControllerTest.image2byte;@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTest(classes = XiaoyudiApplication.class, properties = "/application.properties")@AutoConfigureMockMvc@Transactionalpublic class SentenceControllerTest {    private final Logger logger = LoggerFactory.getLogger(SentenceControllerTest.class);    private MockMvc mockMvc;    @Autowired    private SentenceController sentenceController;    private String reqUrl = "/manage/sentence";    private String testImg = System.getProperty("user.dir") + "/src/main/resources/test.jpg";    MockMultipartFile mockMultipartFile = new MockMultipartFile("cardOneImage","verbImage.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile1 = new MockMultipartFile("cardOneRecord","verbRecord.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile2 = new MockMultipartFile("cardTwoImage","cardImage.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile3 = new MockMultipartFile("cardTwoRecord","cardRecord.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile4 = new MockMultipartFile("startSlideshow","startSlideshow.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile5 = new MockMultipartFile("cardThreeImage","endSlideshow.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile6 = new MockMultipartFile("cardThreeRecord","endSlideshow.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile7 = new MockMultipartFile("cardFourImage","endSlideshow.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile8 = new MockMultipartFile("cardFourRecord","groupImage.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    MockMultipartFile mockMultipartFile9 = new MockMultipartFile("groupRecord","groupRecord.jpg", ContentType.IMAGE_JPEG.getMimeType(),image2byte(testImg));    @Before    public void setUp() throws Exception {        this.mockMvc = MockMvcBuilders.standaloneSetup(sentenceController).build();    }    @After    public void tearDown() throws Exception {    }    @Test    public void toNoumTrainingPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/toSentenceResolveTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toNoumTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toNoumTrainingPage result:" + result);    }    @Test    public void toSentencegroupTrainingPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/toSentenceGroupTrainingPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toSentencegroupTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toSentencegroupTrainingPage result:" + result);    }    @Test    public void toVerbTestPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/toSentenceResolveTestPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toVerbTestPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toVerbTestPage result:" + result);    }    @Test    public void sentenceGroupTrainingPage() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/toSentenceGroupTestPage"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====sentenceGroupTrainingPage mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====sentenceGroupTrainingPage result:" + result);    }    @Test    public void jiaoyan() throws Exception{        List<String> stringList = new ArrayList();        sentenceController.jiaoyan(stringList);    }    @Test    public void toAddSentenceGroupTraining() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAddSentenceGroupTraining")                .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddSentenceGroupTraining result:" + result);    }    @Test    public void toAddSentenceGroupTest() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAddSentenceGroupTest")                .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddSentenceGroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddSentenceGroupTest result:" + result);    }    @Test    public void toCheckSentenceResolveTest() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toCheckSentenceResolveTest")                .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toCheckSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toCheckSentenceResolveTest result:" + result);    }    @Test    public void toCheckSentenceResolveTraining() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toCheckSentenceResolveTraining")                .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toCheckSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toCheckSentenceResolveTraining result:" + result);    }    @Test    public void toAddSentenceResolveTest() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAddSentenceResolveTest")                .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddSentenceResolveTest result:" + result);    }    @Test    public void toAddSentenceResolveTraining() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/toAddSentenceResolveTraining")                .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====toAddSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====toAddSentenceResolveTraining result:" + result);    }    @Test    public void getSentenceResolveTrainingList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("groupWord", Arrays.asList("test"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getSentenceResolveTrainingList")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getSentenceResolveTrainingList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getSentenceResolveTrainingList result:" + result);    }    @Test    public void addSentenceResolveTraining() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addSentenceResolveTraining")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceResolveTraining result:" + result);    }    @Test    public void addSentenceResolveTraining1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addSentenceResolveTraining")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceResolveTraining result:" + result);    }    @Test    public void addSentenceResolveTraining2() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/addSentenceResolveTraining")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceResolveTraining result:" + result);    }    @Test    public void deleteSentenceResolveTraining() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceResolveTraining"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceResolveTraining result:" + result);    }    @Test    public void deleteSentenceResolveTraining1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceResolveTraining")            .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceResolveTraining result:" + result);    }    @Test    public void deleteSentenceResolveTraining2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceResolveTraining")                .param("id", "100000000000000")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceResolveTraining result:" + result);    }    @Test    public void updateSentenceResolveTraining() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/updateSentenceResolveTraining")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceResolveTraining result:" + result);    }    @Test    public void updateSentenceResolveTraining1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        params.put("id", Arrays.asList("2"));       ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/updateSentenceResolveTraining")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceResolveTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceResolveTraining result:" + result);    }    @Test    public void sentenceResolveTrainingDetail() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/SentenceResolveTrainingDetail"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====SentenceResolveTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====SentenceResolveTrainingDetail result:" + result);    }    @Test    public void sentenceResolveTrainingDetail1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/SentenceResolveTrainingDetail")            .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====SentenceResolveTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====SentenceResolveTrainingDetail result:" + result);    }    @Test    public void getSentenceResolveTestList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("groupWord", Arrays.asList("test"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getSentenceResolveTestList")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getSentenceResolveTestList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getSentenceResolveTestList result:" + result);    }    @Test    public void addSentenceResolveTest() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addSentenceResolveTest")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceResolveTest result:" + result);    }    @Test    public void addSentenceResolveTest1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        params.put("cardOneTime", Arrays.asList("1"));        params.put("cardTwoTime", Arrays.asList("1"));        params.put("cardThreeTime", Arrays.asList("1"));        params.put("cardFourTime", Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/addSentenceResolveTest")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceResolveTest result:" + result);    }    @Test    public void deleteSentenceResolveTest() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceResolveTest")            .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceResolveTest result:" + result);    }    @Test    public void deleteSentenceResolveTest1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceResolveTest")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceResolveTest result:" + result);    }    @Test    public void deleteSentenceResolveTest2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceResolveTest")                .param("id", "10000")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceResolveTest result:" + result);    }    @Test    public void updateSentenceResolveTest() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/updateSentenceResolveTest")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceResolveTest result:" + result);    }    @Test    public void updateSentenceResolveTest1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardThreeChar", Arrays.asList("2"));        params.put("cardFourChar", Arrays.asList("0"));        params.put("groupChar", Arrays.asList("1,2"));        params.put("id", Arrays.asList("2"));        params.put("cardOneTime", Arrays.asList("1"));        params.put("cardTwoTime", Arrays.asList("1"));        params.put("cardThreeTime", Arrays.asList("1"));        params.put("cardFourTime", Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/updateSentenceResolveTest")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceResolveTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceResolveTest result:" + result);    }    @Test    public void sentenceResolveTestDetail() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/SentenceResolveTestDetail"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====SentenceResolveTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====SentenceResolveTestDetail result:" + result);    }    @Test    public void sentenceResolveTestDetail1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/SentenceResolveTestDetail")            .param("id", "1")        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====SentenceResolveTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====SentenceResolveTestDetail result:" + result);    }    @Test    public void getSentencegroupTrainingList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("groupWord", Arrays.asList("test"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getSentencegroupTrainingList")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getSentencegroupTrainingList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getSentencegroupTrainingList result:" + result);    }    @Test    public void addSentencegroupTraining() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/addSentenceGroupTraining")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceGroupTraining result:" + result);    }    @Test    public void addSentencegroupTraining1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addSentenceGroupTraining")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceGroupTraining result:" + result);    }    @Test    public void addSentencegroupTraining2() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardTwoChar", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addSentenceGroupTraining")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceGroupTraining result:" + result);    }    @Test    public void deleteSentencegroupTraining() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceGroupTraining"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceGroupTraining result:" + result);    }    @Test    public void deleteSentencegroupTraining1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceGroupTraining")        .param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceGroupTraining result:" + result);    }    @Test    public void deleteSentencegroupTraining2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentenceGroupTraining")                .param("id", "100000000000000"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentenceGroupTraining result:" + result);    }    @Test    public void updateSentencegroupTraining() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/updateSentenceGroupTraining")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceGroupTraining result:" + result);    }    @Test    public void updateSentencegroupTraining1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        params.put("id", Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/updateSentenceGroupTraining")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceGroupTraining mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceGroupTraining result:" + result);    }    @Test    public void sentencegroupTrainingDetail() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/sentencegroupTrainingDetail"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====sentencegroupTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====sentencegroupTrainingDetail result:" + result);    }    @Test    public void sentencegroupTrainingDetail1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/sentencegroupTrainingDetail")        .param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====sentencegroupTrainingDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====sentencegroupTrainingDetail result:" + result);    }    @Test    public void getSentenceGroupTestList() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("start", Arrays.asList("1"));        params.put("length", Arrays.asList("10"));        params.put("groupWord", Arrays.asList("test"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/getSentencegroupTestList")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====getSentencegroupTestList mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====getSentencegroupTestList result:" + result);    }    @Test    public void addSentencegroupTest() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardOneTime", Arrays.asList("1"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/addSentenceGroupTest")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceGroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceGroupTest result:" + result);    }    @Test    public void addSentencegroupTest1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardOneTime", Arrays.asList("1"));        params.put("cardTwoTime", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/addSentenceGroupTest")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====addSentenceGroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====addSentenceGroupTest result:" + result);    }    @Test    public void deleteSentencegroupTest() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentencegroupTest"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentencegroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentencegroupTest result:" + result);    }    @Test    public void deleteSentencegroupTest1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentencegroupTest")        .param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentencegroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentencegroupTest result:" + result);    }    @Test    public void deleteSentencegroupTest2() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/deleteSentencegroupTest")                .param("id", "100000"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====deleteSentencegroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====deleteSentencegroupTest result:" + result);    }    @Test    public void updateSentencegroupTest() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardOneTime", Arrays.asList("1"));        params.put("cardTwoTime", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        params.put("id", Arrays.asList("2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/updateSentenceGroupTest")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceGroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceGroupTest result:" + result);    }    @Test    public void updateSentencegroupTest1() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardOneTime", Arrays.asList("1"));        params.put("cardTwoTime", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        params.put("id", Arrays.asList("2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/updateSentenceGroupTest")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceGroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceGroupTest result:" + result);    }    @Test    public void updateSentencegroupTest3() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardOneTime", Arrays.asList("1"));        params.put("cardTwoTime", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.POST,reqUrl + "/updateSentenceGroupTest")                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceGroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceGroupTest result:" + result);    }    @Test    public void updateSentencegroupTest4() throws Exception{        MultiValueMap<String, String> params = new LinkedMultiValueMap<>();        params.put("cardOneChar", Arrays.asList("管理员"));        params.put("cardTwoChar", Arrays.asList("1"));        params.put("cardOneTime", Arrays.asList("1"));        params.put("cardTwoTime", Arrays.asList("1"));        params.put("groupChar", Arrays.asList("1,2"));        params.put("id", Arrays.asList("200000"));        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.fileUpload(reqUrl + "/updateSentenceGroupTest")                .file(mockMultipartFile)                .file(mockMultipartFile1)                .file(mockMultipartFile2)                .file(mockMultipartFile3)                .file(mockMultipartFile4)                .file(mockMultipartFile5)                .file(mockMultipartFile6)                .file(mockMultipartFile7)                .file(mockMultipartFile8)                .file(mockMultipartFile9)                .params(params)        );        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====updateSentenceGroupTest mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====updateSentenceGroupTest result:" + result);    }    @Test    public void sentencegroupTestDetail() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/sentencegroupTestDetail"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====sentencegroupTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====sentencegroupTestDetail result:" + result);    }    @Test    public void sentencegroupTestDetail1() throws Exception{        ResultActions resultActions = this.mockMvc.perform(MockMvcRequestBuilders.request(HttpMethod.GET,reqUrl + "/sentencegroupTestDetail")        .param("id", "1"));        MvcResult mvcResult = resultActions.andReturn();        logger.info("=====sentencegroupTestDetail mvcResult:" + mvcResult.getResponse().getStatus());        String result = mvcResult.getResponse().getContentAsString();        logger.info("=====sentencegroupTestDetail result:" + result);    }}